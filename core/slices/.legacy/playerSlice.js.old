/**
 * Player Slice - Manages player state, actions, and side effects
 */

export const playerSlice = {
    name: 'player',
    
    initialState: {
        x: 5,
        y: 5,
        hp: 100,
        maxHp: 100,
        mp: 20,
        maxMp: 20,
        level: 1,
        experience: 0,
        coins: 50,
        inventory: ["lucky_coin"],
        stats: { luck: 1.0, speed: 1.0, strength: 1.0 },
        equipment: { weapon: null, armor: null }
    },

    actions: {
        MOVE_PLAYER: 'MOVE_PLAYER',
        MOVE_PLAYER_TO: 'MOVE_PLAYER_TO',
        UPDATE_STATS: 'UPDATE_STATS',
        GAIN_EXPERIENCE: 'GAIN_EXPERIENCE',
        LEVEL_UP: 'LEVEL_UP',
        HEAL: 'HEAL',
        DAMAGE: 'DAMAGE'
    },

    reducers: {
        MOVE_PLAYER: (state, action) => {
            const { direction } = action.payload;
            const moves = { 
                up: {x: 0, y: -1}, 
                down: {x: 0, y: 1}, 
                left: {x: -1, y: 0}, 
                right: {x: 1, y: 0} 
            };
            const move = moves[direction];
            if (!move) return state;

            const newX = state.player.x + move.x;
            const newY = state.player.y + move.y;

            // Basic bounds check (TODO: use floor data for proper collision)
            if (newX < 0 || newX >= 20 || newY < 0 || newY >= 20) return state;

            return {
                ...state,
                player: { ...state.player, x: newX, y: newY }
            };
        },

        MOVE_PLAYER_TO: (state, action) => {
            const { x, y } = action.payload;
            if (x < 0 || x >= 20 || y < 0 || y >= 20) return state;

            return {
                ...state,
                player: { ...state.player, x, y }
            };
        },

        UPDATE_STATS: (state, action) => {
            const { stats } = action.payload;
            return {
                ...state,
                player: {
                    ...state.player,
                    stats: { ...state.player.stats, ...stats }
                }
            };
        },

        GAIN_EXPERIENCE: (state, action) => {
            const { amount } = action.payload;
            const newExperience = state.player.experience + amount;
            
            return {
                ...state,
                player: {
                    ...state.player,
                    experience: newExperience
                }
            };
        },

        LEVEL_UP: (state, action) => {
            return {
                ...state,
                player: {
                    ...state.player,
                    level: state.player.level + 1,
                    experience: 0,
                    hp: state.player.maxHp,
                    mp: state.player.maxMp
                }
            };
        },

        HEAL: (state, action) => {
            const { amount } = action.payload;
            const newHp = Math.min(state.player.hp + amount, state.player.maxHp);
            
            return {
                ...state,
                player: {
                    ...state.player,
                    hp: newHp
                }
            };
        },

        DAMAGE: (state, action) => {
            const { amount } = action.payload;
            const newHp = Math.max(state.player.hp - amount, 0);
            
            return {
                ...state,
                player: {
                    ...state.player,
                    hp: newHp
                }
            };
        }
    },

    // Side effects - called after state changes
    effects: {
        MOVE_PLAYER: (state, action, store) => {
            // Could trigger movement events, check for items/enemies, etc.
            store.events?.emit('PLAYER_MOVED', {
                from: { x: state.player.x - action.payload.direction.x, y: state.player.y - action.payload.direction.y },
                to: { x: state.player.x, y: state.player.y },
                direction: action.payload.direction
            });
        },

        LEVEL_UP: (state, action, store) => {
            store.events?.emit('PLAYER_LEVELED_UP', {
                newLevel: state.player.level,
                player: state.player
            });
        },

        DAMAGE: (state, action, store) => {
            if (state.player.hp <= 0) {
                store.events?.emit('PLAYER_DIED', { player: state.player });
            }
        }
    },

    // Selectors for easy state access
    selectors: {
        getPlayer: (state) => state.player,
        getPosition: (state) => ({ x: state.player.x, y: state.player.y }),
        getStats: (state) => state.player.stats,
        getInventory: (state) => state.player.inventory,
        isAlive: (state) => state.player.hp > 0,
        getHealthPercentage: (state) => state.player.hp / state.player.maxHp,
        getManaPercentage: (state) => state.player.mp / state.player.maxMp
    }
};
